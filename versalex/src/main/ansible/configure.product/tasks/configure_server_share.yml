   - name: Creates Shares Destination Path Directory
     file: path="{{versalex.server_share_path}}" state=directory
     # when: versalex.server_share_path is defined     

   - name: "Add Dir Entry to /etc/exports file"
     lineinfile:
        create: yes
        dest: "/etc/exports"
        line: "{{versalex.server_share_path}}  *(rw,sync,no_root_squash,no_subtree_check)"
        state: present
        insertafter: EOF
     # when: versalex.server_share_path is defined     
        
   - name: Configure Exportfs in Remote Machines
     shell: "exportfs -a"     
     register: export_results
     # when: versalex.server_share_path is defined     
     
   - name: Ensure NFS and RPCBind service restarted
     service: name="{{ item }}" state=restarted enabled=yes
     with_items:
        - rpcbind
        - nfslock
        - nfs
     # when: versalex.server_share_path is defined     
        
   - name: Copy SetupOptions Jar File to remote location
     copy: src="/root/workspace/EFSS/non-shipped/test/automation/systemtesting/setup_versalex/target/systest_jars-0.1-SNAPSHOT.jar" dest="{{versalex.install_location}}/SetupOptions.jar"
     # when: versalex.server_share_path is defined     
   
   - name: Configure Shares in Remote Machines
     shell: jre/bin/java -cp $CLASSPATH com.cleo.systest.SetupOptions "{{versalex.name}}" "{{versalex.install_location}}" "SHARE" "{{versalex.server_custom_macro}}"
     environment:
       CLASSPATH: ":{{versalex.install_location}}SetupOptions.jar:{{versalex.install_location}}lib/*:{{versalex.install_location}}lib/help/*:{{versalex.install_location}}lib/hibernate/*:{{versalex.install_location}}lib/secureshare/*:{{versalex.install_location}}webserver/AjaxSwing/lib/*:{{versalex.install_location}}lib/json/*"
     args:
       chdir: "{{versalex.install_location}}"
     # with_dict: "{{configure_apps['nfs_server_shares'] | default({}) }}"
     # when: (versalex.name != 'VLProxy' and versalex.server_share_path is defined)
     register: shares_config
     retries: 3
     delay: 5  
     until: shares_config|success

   # - name: Creates Shares  Directory
     # file: path="{{versalex.client_local_path}}" state=directory
     # when: versalex.client_local_path is defined
     
   # - name: Setup Shares in Client boxes
     # mount:
       # name: "{{versalex.client_local_path}}"
       # src: "{{hostvars[item]['ansible_eth0']['ipv4']['address'] }}:{{hostvars[item]['server_share_path']}}"
       # state: mounted
       # fstype: "nfs"     
     # #with_dict: "{{configure_apps['nfs_client_shares'] | default({}) }}"
     # with_items: "{{groups[servers.groupname] | default({})}}"
     # when: versalex.client_local_path is defined     
     # register: shares_client
     # retries: 3
     # delay: 5
     # until: shares_client|success     
   # - name: Setup Shares in Server boxes
     # shell: "mount -t nfs {{hostvars[item.value.node_ip]['ansible_eth0']['ipv4']['address'] }}:{{item.value.src_path}} {{item.value.dest_path}}"
     # with_dict: "{{configure_apps['shares']}}"         
     # when: configure_apps.vex_product != 'VLProxy'
     # register: share_config
     # retries: 3
     # delay: 5  
     # until: share_config|success
   # - name: Setup Shares in Server boxes
     # mount:
       # name: "{{item.value.dest_path}}"
       # src: "{{hostvars[item.value.node_ip]['ansible_eth0']['ipv4']['address'] }}:{{item.value.src_path}}"
       # state: mounted
       # fstype: "nfs"
     # sudo_user: root 
     # with_dict: "{{configure_apps['shares']}}"
     # when: versalex.vex_product != 'VLProxy'
   # - name: Setup Shares in Server boxes
     # shell: "mount -t nfs {{hostvars[item.value.node_ip]['ansible_eth0']['ipv4']['address'] }}:{{item.value.src_path}} {{item.value.dest_path}}"
     # with_dict: "{{configure_apps['shares']}}"         
     # when: versalex.vex_product != 'VLProxy'
     # register: share_config
     # retries: 3
     # delay: 5  
     # until: share_config|success