   - name: Creates Role Based Location Directory
     file: path="{{playbook_dir}}/results/{{role_path |basename}}/{{inventory_hostname}}/" state=directory
     delegate_to: 127.0.0.1    
   - name: Capture SerialNumber and Write Node File  
     shell: "./{{configure_apps.vex_product}}c -s license |grep 'Serial Number' | awk -F '=' '{print $2}' "
     args:
      chdir: "{{configure_apps.install_location}}"
     when: configure_apps.vex_product != "VLProxy"
     register: serifile
   - name: Print Serial No Details
     debug: msg="Serial No Details {{serifile}}"
     when: configure_apps.vex_product != "VLProxy"
   - name: Convert and Store Versalex Product Details to YAML file in Results Folder
     copy: content="{{ serifile  | to_nice_yaml( width=50, explicit_start=True, explicit_end=True)}}" dest="{{playbook_dir}}/results/{{role_path |basename}}/{{inventory_hostname}}/serialno.yml"
     delegate_to: 127.0.0.1
   - name: Serial Numbers Included
     include_vars: "{{playbook_dir}}/results/{{role_path |basename}}/{{inventory_hostname}}/serialno.yml"
     when: configure_apps.vex_product !='VLProxy'
     ignore_errors: true
     delegate_to: 127.0.0.1
   - name: Print Serial Number
     debug: msg="Serial No:{{stdout}}"
     when: configure_apps.vex_product !='VLProxy'
     delegate_to: 127.0.0.1
   - name: Remove VLProxy File if exists
     file:
      path: "{{playbook_dir}}/results/{{role_path |basename}}/vlproxy.txt"
      state: absent
     delegate_to: 127.0.0.1
     when: configure_apps.vex_product !='VLProxy'
   - name: Create VLProxy  File
     lineinfile:
       create: yes
       dest: "{{playbook_dir}}/results/{{role_path |basename}}/vlproxy.txt"
      # regexp: "{{item.regexp}}"
       line: "{{item.line}}"
       state: present
     #  backrefs: "{{item.backrefs}}"
       insertafter: "{{item.insertafter}}"
# #        insertbefore: BOF
     with_items:
        - {  line: 'Admin', insertafter: EOF}
        - {  line: '2', insertafter: EOF}
        - {  line: '', insertafter: EOF}
# #        - { regexp: '(.*)' , line: '\1',backrefs: yes, insertafter: regex }        
     delegate_to: 127.0.0.1
     when: configure_apps.vex_product !='VLProxy'
   - name: Add Serial Numbers to VLProxy files for different hosts
     lineinfile:
        create: yes
        dest: "{{playbook_dir}}/results/{{role_path |basename}}/vlproxy.txt"
        regexp: "{{item.regexp}}"
        line: "{{item.line}}"
        state: present
        backrefs: "{{item.backrefs}}"
        insertafter: "{{item.insertafter}}"
     with_items:
# #        - { regexp: '.^[,]' , line: '{{serifile.results[0].stdout}},',backrefs: no, insertafter: EOF }
       # # - { regexp: '\n\s*\n' , line: '{{serifile.results[0].stdout}},',backrefs: no, insertafter: EOF }
# #        - { regexp: '.DOTALL', line: '2',backrefs: no, insertafter: EOF}       
        - { regexp: '(.*)' , line: '\1,{{stdout}}',backrefs: yes, insertafter: EOF }
     when: configure_apps.vex_product !='VLProxy'   
     delegate_to: 127.0.0.1
   - name: Save VLProxy Configs
     lineinfile:
        create: yes
        dest: "{{playbook_dir}}/results/{{role_path |basename}}/vlproxy.txt"
#        regexp: "{{item.regexp}}"
        line: "{{item.line}}"
        state: present
#        backrefs: "{{item.backrefs}}"
        insertafter: "{{item.insertafter}}"
     with_items:
        - {  line: '0',insertafter: EOF}
     delegate_to: 127.0.0.1
     when: configure_apps.vex_product !='VLProxy'
   - name: Copy VLProxy File to Remote Install Location
     copy: src="{{playbook_dir}}/results/{{role_path |basename}}/vlproxy.txt" dest="{{configure_apps.install_location}}"
     when: configure_apps.vex_product == 'VLProxy'
   - name: Configure VLProxy with Serial Numbers File
     shell: "{{item}}"
     args:
      chdir: "{{configure_apps.install_location}}"
     with_items:
       - ./{{configure_apps.vex_product}}c -p < vlproxy.txt
     when: configure_apps.vex_product == 'VLProxy'
   - name: Copy User VLProxy Config File to Remote Install Location
     copy: src="{{playbook_dir}}/{{role_path |basename}}/files/" dest="{{configure_apps.install_location}}"
     when: configure_apps.vex_product == 'VLProxy'
 #    with_dict: "{{configure_apps['vlproxies']}}"     
   - name: Configure VLProxy with User File Configs
     shell: "./{{configure_apps.vex_product}}c -p < {{item.value.filepath}}"
     args:
      chdir: "{{configure_apps.install_location}}"     
     with_dict: "{{configure_apps['vlproxies']}}"
     when: configure_apps.vex_product == 'VLProxy'
     register: vlproxyconf
   # - name: Get VLProxy IP Addresses
     # debug: msg="{{ansible_ssh_host}}"
     # register: proxy_ips
     # when: configure_apps.vex_product == 'VLProxy'
   # - name: Print IPAddresses
     # debug: msg="IP address:{{ hostvars['client1']['ansible_eth0']['ipv4']['address']}}"     
     # when: configure_apps.vex_product != 'VLProxy'
     # register: vlproxystat
     # when: vlpfil.stat.exists == False
   # - name: Grep IPAddress of VLProxy Facts file
     # shell: "{{item}}"     
     # with_items:
      # - grep -Po 'IPAddress=\K[^*]+' "{{playbook_dir}}/res/vlproxyfacts.txt"
     # register: vlproip     
     # delegate_to: 127.0.0.1
     # when: versalex_artifactid != 'VLProxy'
   # - debug: msg="GREP IP ADDRESS RES:{{vlproip}}"
# #     ignore_erros: True
# #   - debug: msg="{{serifile.results[0].stdout}}"
# #     delegate_to: 127.0.0.1
   # - name: Remove VLProxy File if exists
     # file:
      # path: "{{playbook_dir}}/{{vlproxyfile}}"
      # state: absent
     # delegate_to: 127.0.0.1     
   # - name: Check File Exists
     # stat: path="{{playbook_dir}}/{{vlproxyfile}}"
     # register: vlpfil
     # delegate_to: 127.0.0.1
   # - name: Create VLProxy to File
     # lineinfile:
        # create: yes
        # dest: "{{playbook_dir}}/{{vlproxyfile}}"
# #        regexp: "{{item.regexp}}"
        # line: "{{item.line}}"
        # state: present
# #        backrefs: "{{item.backrefs}}"
        # insertafter: "{{item.insertafter}}"
# #        insertbefore: BOF
     # with_items:
        # - {  line: 'Admin', insertafter: EOF}
        # - {  line: '2', insertafter: EOF}
        # - {  line: '', insertafter: EOF}
# #        - { regexp: '(.*)' , line: '\1',backrefs: yes, insertafter: regex }        
     # delegate_to: 127.0.0.1
     # when: vlpfil.stat.exists == False
   # - name: Add Serial Numbers to VLProxy files for different hosts
     # lineinfile:
        # create: yes
        # dest: "{{playbook_dir}}/{{vlproxyfile}}"
        # regexp: "{{item.regexp}}"
        # line: "{{item.line}}"
        # state: present
        # backrefs: "{{item.backrefs}}"
        # insertafter: "{{item.insertafter}}"
     # with_items:
# #        - { regexp: '.^[,]' , line: '{{serifile.results[0].stdout}},',backrefs: no, insertafter: EOF }
       # # - { regexp: '\n\s*\n' , line: '{{serifile.results[0].stdout}},',backrefs: no, insertafter: EOF }
# #        - { regexp: '.DOTALL', line: '2',backrefs: no, insertafter: EOF}       
        # - { regexp: '(.*)' , line: '\1,{{serifile.results[0].stdout}}',backrefs: yes, insertafter: EOF }
     # delegate_to: 127.0.0.1     
     # #when: vlpfil.stat.exists == True
   # - name: Save VLProxy Configs
     # lineinfile:
        # create: yes
        # dest: "{{playbook_dir}}/{{vlproxyfile}}"
# #        regexp: "{{item.regexp}}"
        # line: "{{item.line}}"
        # state: present
# #        backrefs: "{{item.backrefs}}"
        # insertafter: "{{item.insertafter}}"
     # with_items:
        # - {  line: '0',insertafter: EOF}
     # delegate_to: 127.0.0.1
   # - name: Copy VLProxy File to Remote Install Location
     # copy: src="{{playbook_dir}}/{{vlproxyfile}}" dest="{{install_location}}"
     # when: versalex_artifactid == 'VLProxy'
# #     delegate_to: 127.0.0.1 
   # - name: Configure VLProxy with Serial Numbers File
     # shell: "{{item}}"
     # args:
      # chdir: "{{install_location}}"
     # with_items:
      # - ./{{versalex_artifactid}}c -p < "{{vlproxyfile}}"
     # when: versalex_artifactid == 'VLProxy'
     # register: vlproxystat
   # - name: Copy User VLProxy Config File to Remote Install Location
     # copy: src="{{playbook_dir}}/{{item.value.filepath}}" dest="{{install_location}}"
     # when: versalex_artifactid == 'VLProxy'     
     # with_dict: "{{vlproxies}}"
     # ignore_errors: True
   # - name: Configure VLProxy with User File Configs
     # shell: "./{{versalex_artifactid}}c -p < {{item.value.filepath}}"
     # args:
      # chdir: "{{install_location}}"           
     # with_dict: "{{vlproxies}}"
     # ignore_errors: True
     # when: versalex_artifactid == 'VLProxy'
     # register: vlproxyconf     
   # - name: Start VLProxy After vlproxy file configs 
     # shell: "{{item}}"
     # args:
      # chdir: "{{install_location}}"
     # with_items:
      # - ./{{versalex_artifactid}}d start
     # when: versalex_artifactid == 'VLProxy'
     # register: vlproxstart
   # - name: Configure PROXY in Remote Machines on VersalEx Products
     # shell: jre/bin/java -cp $CLASSPATH com.cleo.systest.SetupOptions "{{versalex_artifactid}}" "{{install_location}}" "PROXY" "{{item.value.type}}" "{{vlproip.results[0].stdout}}" "{{item.value.port}}" "{{item.value.revfwdproxy}}"
     # environment:
       # CLASSPATH: ":{{install_location}}systest-1.0-SNAPSHOT.jar:{{install_location}}lib/*:{{install_location}}lib/help/*:{{install_location}}lib/hibernate/*:{{install_location}}lib/secureshare/*:{{install_location}}webserver/AjaxSwing/lib/*:{{install_location}}lib/json/*"       
     # args:
       # chdir: "{{install_location}}"
     # with_dict: "{{proxies}}"         
     # ignore_errors: True
     # register: proxy_config
     # when: versalex_artifactid != 'VLProxy'
     # retries: 3
     # delay: 5  
     # until: proxy_config|success